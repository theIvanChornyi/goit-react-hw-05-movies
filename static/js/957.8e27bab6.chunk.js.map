{"version":3,"file":"static/js/957.8e27bab6.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/MoviePreviewCard/MoviePreviewCard.module.css?d7ed","components/MoviePreviewCard/MoviePreviewCard.jsx","webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.css?82ee","webpack://goit-react-hw-05-movies/./src/components/Paginator/Paginator.module.css?d053","components/Paginator/Paginator.jsx","webpack://goit-react-hw-05-movies/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MoviePreviewCard_item__Wu4TU\",\"link\":\"MoviePreviewCard_link__OyTQZ\",\"thumb\":\"MoviePreviewCard_thumb__Qe5LY\",\"subtitle\":\"MoviePreviewCard_subtitle__wcusk\",\"text\":\"MoviePreviewCard_text__Rf+iu\"};","import PropTypes from 'prop-types';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport defaulMoviePoster from 'img/defaultMovie.jpg';\r\n\r\nimport css from './MoviePreviewCard.module.css';\r\n\r\nexport const MoviePreviewCard = ({ data }) => {\r\n  const { poster_path, title, release_date, id, overview } = data;\r\n  const location = useLocation();\r\n  return (\r\n    <li className={css.item}>\r\n      <Link\r\n        className={css.link}\r\n        to={`/movies/${id}`}\r\n        state={{ from: location }}\r\n      >\r\n        <div className={css.thumb}>\r\n          <img\r\n            width={'100px'}\r\n            src={\r\n              poster_path\r\n                ? `https://image.tmdb.org/t/p/w200${poster_path}`\r\n                : defaulMoviePoster\r\n            }\r\n            alt={title}\r\n          />\r\n        </div>\r\n        <span>\r\n          <p className={css.subtitle}>{title}</p>\r\n          <p className={css.text}>{release_date}</p>\r\n          <p className={css.text}>{overview}</p>\r\n        </span>\r\n      </Link>\r\n    </li>\r\n  );\r\n};\r\n\r\nMoviePreviewCard.propTypes = {\r\n  data: PropTypes.shape({\r\n    poster_path: PropTypes.string,\r\n    title: PropTypes.string,\r\n    release_date: PropTypes.string,\r\n    id: PropTypes.number,\r\n    overview: PropTypes.string,\r\n  }),\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Movies_container__+-Cnt\",\"moviesList\":\"Movies_moviesList__lstJL\",\"messageEmpty\":\"Movies_messageEmpty__Jw6CB\"};","// extracted by mini-css-extract-plugin\nexport default {\"paginator\":\"Paginator_paginator__rIDQQ\",\"list\":\"Paginator_list__2SO0q\",\"item\":\"Paginator_item__MJ3DA\",\"button\":\"Paginator_button__TBgKi\",\"active\":\"Paginator_active__HwRvN\"};","import PropTypes from 'prop-types';\r\nimport css from './Paginator.module.css';\r\n\r\nexport const Paginator = ({ totalPages, paginationFunc, page }) => {\r\n  const currentPage = +page;\r\n  return (\r\n    <div className={css.paginator}>\r\n      <ul className={css.list}>\r\n        {[...Array(totalPages)].map((_, number) => {\r\n          const nextPage = number + 1;\r\n          return (\r\n            <li key={number} className={css.item}>\r\n              <button\r\n                className={currentPage !== nextPage ? css.button : css.active}\r\n                onClick={() => paginationFunc({ number: nextPage })}\r\n                type=\"button\"\r\n              >\r\n                {nextPage}\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nPaginator.propTypes = {\r\n  totalPages: PropTypes.number,\r\n  paginationFunc: PropTypes.func,\r\n  page: PropTypes.string,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchForm_form__o80os\",\"wrapper\":\"SearchForm_wrapper__JqfAl\",\"input\":\"SearchForm_input__HOxJo\",\"button\":\"SearchForm_button__UXY06\",\"visible\":\"SearchForm_visible__52D9C\"};","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport { HiSearch } from 'react-icons/hi';\r\n\r\nimport css from './SearchForm.module.css';\r\n\r\nexport const SearchForm = ({ onHandleSubmit }) => {\r\n  const [query, setQuery] = useState('');\r\n\r\n  const onChange = e => setQuery(e.target.value);\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    onHandleSubmit({ value: query });\r\n  };\r\n\r\n  return (\r\n    <form className={css.form} onSubmit={onSubmit}>\r\n      <div className={css.wrapper}>\r\n        <input\r\n          name=\"film\"\r\n          onChange={onChange}\r\n          placeholder=\"Film name\"\r\n          className={css.input}\r\n          value={query}\r\n        />\r\n        {query && (\r\n          <button className={css.button} type=\"submit\">\r\n            <HiSearch />\r\n          </button>\r\n        )}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nSearchForm.propTypes = {\r\n  onHandleSubmit: PropTypes.func,\r\n};\r\n","import { getMovieByName } from 'services/MovieAPI/API';\r\nimport { useEffect, useState } from 'react';\r\nimport { MoviePreviewCard } from 'components/MoviePreviewCard';\r\n\r\nimport css from './Movies.module.css';\r\nimport { STATE } from 'services/config/page.state';\r\nimport { useStateMachine } from 'services/hooks/stateMachine';\r\n\r\nimport { Paginator } from 'components/Paginator';\r\nimport { SearchForm } from 'components/SearchForm';\r\nimport { Spiner } from 'components/Spiner';\r\nimport { ErrorMesage } from 'components/ErrorMesage';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nconst MoviePage = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [query, setQuery] = useSearchParams();\r\n  const { isResolved, isLoad, isRejected, setStateMachine } = useStateMachine(\r\n    STATE.IDLE\r\n  );\r\n\r\n  const filmNameStr = query.get('filmName') ?? '';\r\n  const pageStr = query.get('pageNumber') ?? 1;\r\n\r\n  const handleWriteQuery = ({ value = filmNameStr, number = 1 }) => {\r\n    setQuery(value ? { filmName: value, pageNumber: number } : {});\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (filmNameStr) {\r\n      setStateMachine(STATE.LOAD);\r\n      get();\r\n    }\r\n\r\n    async function get() {\r\n      try {\r\n        const { results, total_pages } = await getMovieByName(\r\n          filmNameStr,\r\n          pageStr\r\n        );\r\n        setMovies([...results]);\r\n        setTotalPages(total_pages);\r\n        setStateMachine(STATE.RESOLVE);\r\n      } catch (error) {\r\n        setStateMachine(STATE.ERROR);\r\n        console.log(error.message);\r\n      }\r\n    }\r\n  }, [filmNameStr, pageStr, setStateMachine]);\r\n\r\n  const moviesAmount = movies.length;\r\n  return (\r\n    <section className={css.container}>\r\n      <SearchForm onHandleSubmit={handleWriteQuery} />\r\n      {isLoad && <Spiner />}\r\n      {moviesAmount > 0 && isResolved && (\r\n        <ul className={css.moviesList}>\r\n          {movies.map(({ poster_path, title, id, release_date, overview }) => (\r\n            <MoviePreviewCard\r\n              key={id}\r\n              data={{ poster_path, title, release_date, id, overview }}\r\n            />\r\n          ))}\r\n        </ul>\r\n      )}\r\n      {isResolved && moviesAmount === 0 && (\r\n        <h2 className={css.messageEmpty}>\r\n          Unfortunately, we do not have information about film like {query}. :(\r\n        </h2>\r\n      )}\r\n      {isRejected && <ErrorMesage />}\r\n      {totalPages > 1 && isResolved && (\r\n        <Paginator\r\n          totalPages={totalPages}\r\n          page={pageStr}\r\n          paginationFunc={handleWriteQuery}\r\n        />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default MoviePage;\r\n"],"names":["MoviePreviewCard","data","poster_path","title","release_date","id","overview","location","useLocation","className","css","to","state","from","width","src","defaulMoviePoster","alt","Paginator","totalPages","paginationFunc","currentPage","page","Array","map","_","number","nextPage","onClick","type","SearchForm","onHandleSubmit","useState","query","setQuery","onSubmit","e","preventDefault","value","name","onChange","target","placeholder","movies","setMovies","setTotalPages","useSearchParams","useStateMachine","STATE","isResolved","isLoad","isRejected","setStateMachine","filmNameStr","get","pageStr","handleWriteQuery","filmName","pageNumber","useEffect","getMovieByName","results","total_pages","console","log","message","moviesAmount","length","Spiner","ErrorMesage"],"sourceRoot":""}